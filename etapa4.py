#!/usr/bin/python3
# -*- encoding: utf-8 -*-
'''
# Projeto para a disciplina de Redes de Computadores
CCO-130 / 21237 - DC/UFSCar

Etapa 4

- Caio Augusto Silva
- Luís Felipe Tomazini
- Mateus Barros
- Antonio Lopes
'''

import socket
import asyncio
import struct

ETH_P_ALL = 0x0003
ETH_P_IP = 0x0800

ICMP = 0x01

# Coloque aqui o endereço de destino para onde você quer mandar o ping
dest_ip = '10.0.1.37'

# Coloque abaixo o endereço IP do seu computador na sua rede local
src_ip = '10.0.1.27'

# Coloque aqui o nome da sua placa de rede
if_name = 'wlp2s0'

# Coloque aqui o endereço MAC do roteador da sua rede local (arp -a | grep _gateway)
dest_mac = '5c:96:9d:6d:bb:b6'

# Coloque aqui o endereço MAC da sua placa de rede (ip link show dev wlan0)
my_mac = '5c:c9:d3:62:25:3e'


payload =   b'\xFF\xD8\xFF\xE0\x00\x10\x4A\x46\x49\x46\x00\x01\x01\x01\x00\x48' \
            b'\x00\x48\x00\x00\xFF\xDB\x00\x43\x00\x08\x06\x06\x07\x06\x05\x08' \
            b'\x07\x07\x07\x09\x09\x08\x0A\x0C\x14\x0D\x0C\x0B\x0B\x0C\x19\x12' \
            b'\x13\x0F\x14\x1D\x1A\x1F\x1E\x1D\x1A\x1C\x1C\x20\x24\x2E\x27\x20' \
            b'\x22\x2C\x23\x1C\x1C\x28\x37\x29\x2C\x30\x31\x34\x34\x34\x1F\x27' \
            b'\x39\x3D\x38\x32\x3C\x2E\x33\x34\x32\xFF\xDB\x00\x43\x01\x09\x09' \
            b'\x09\x0C\x0B\x0C\x18\x0D\x0D\x18\x32\x21\x1C\x21\x32\x32\x32\x32' \
            b'\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32' \
            b'\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32' \
            b'\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\xFF\xC2' \
            b'\x00\x11\x08\x00\x64\x00\x64\x03\x01\x11\x00\x02\x11\x01\x03\x11' \
            b'\x01\xFF\xC4\x00\x1A\x00\x00\x02\x03\x01\x01\x00\x00\x00\x00\x00' \
            b'\x00\x00\x00\x00\x00\x00\x03\x04\x02\x05\x06\x01\x00\xFF\xC4\x00' \
            b'\x19\x01\x00\x03\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00' \
            b'\x00\x00\x00\x01\x02\x03\x04\x05\xFF\xDA\x00\x0C\x03\x01\x00\x02' \
            b'\x10\x03\x10\x00\x00\x01\xC9\x67\x6A\xDC\x0D\xAF\x01\x46\xC8\xF9' \
            b'\x2C\x89\xC8\x49\xB5\x24\x4C\x08\x3E\x4D\x05\xCA\xF7\x27\x43\xB6' \
            b'\x71\x50\xD0\x29\x1B\x96\xEA\x75\x75\x31\x6A\xD1\x52\x09\xFA\x05' \
            b'\x74\x87\x28\x28\xEC\xE7\x45\xC2\xBD\x03\x15\x9C\x3E\x8A\xB7\x6C' \
            b'\xF6\x3C\xBB\xE4\xF5\x83\xE4\x12\x05\x7A\x62\x6E\xAC\x66\xF8\x98' \
            b'\xD5\x89\x1A\x09\x42\xBC\xB3\x9A\x46\xD7\x97\xA3\x19\xB6\x4C\xC2' \
            b'\x2C\x95\x5D\x28\xF3\x6D\x4D\x90\x39\x35\xE1\xD8\x20\x17\x8A\x4E' \
            b'\x74\x7C\xFA\xE6\x7A\x70\x72\xA2\x19\xED\x5D\x6C\x82\xEC\xD0\x59' \
            b'\x29\x6E\xCE\x8F\xA4\x8D\xE2\xC6\x4E\xCA\x2A\xAF\xBB\x94\xA8\x8C' \
            b'\xE9\x5E\x69\x38\xA4\xAE\x02\x2F\x2A\x76\x35\x8B\xCC\x84\x5D\x73' \
            b'\xD9\x06\x6F\x63\xCE\x8C\xD9\x9D\x65\xF9\x3A\x4B\x9D\xF1\x35\x99' \
            b'\xC6\x15\x0C\xCC\x23\x53\x79\x85\x99\x3B\x7F\x73\xCF\x4B\x3B\x35' \
            b'\x4E\x47\x97\xA2\x78\x6C\x49\xB1\x2A\x1D\xC9\xA6\xBA\x62\xAB\x53' \
            b'\x4D\x89\x7A\xCF\x5B\x85\x0C\xB4\x3D\xC5\x0E\x3A\x57\xF3\xEE\x78' \
            b'\xD1\x66\x45\xA7\xF3\x75\x1A\xE0\xEC\x69\xD0\xE8\xF5\xFE\x9F\x10' \
            b'\x21\xF9\x8B\xE7\x58\xFC\xAD\x9C\x76\x24\xE8\x3A\x7D\x31\x03\x92' \
            b'\xCD\x48\x19\x9B\xD3\x77\xF2\x06\x28\x6D\x2B\x15\x5B\x14\x8C\xB2' \
            b'\xAB\x6E\x2A\x9F\x6E\x76\x63\x48\xB0\xF1\x45\x1E\x83\xAB\x0F\x40' \
            b'\xA2\x7C\x61\x64\x0E\x75\x7E\xE6\xAE\x8C\x63\x1E\x8B\x88\xD8\x9A' \
            b'\xF3\x3F\xFF\xC4\x00\x26\x10\x00\x02\x02\x01\x03\x04\x02\x02\x03' \
            b'\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x03\x11\x04\x12\x21\x05' \
            b'\x10\x13\x22\x31\x32\x14\x20\x33\x41\x43\xFF\xDA\x00\x08\x01\x01' \
            b'\x00\x01\x05\x02\x30\x8E\xEA\x85\xCE\xC1\x36\xAC\x08\xA4\x9D\x33' \
            b'\x63\xF5\x27\x1D\x92\xAD\xF3\xE8\x01\xC7\x6C\x98\x97\x15\x84\x26' \
            b'\xA9\x7C\x64\x34\xA7\x4C\xD6\x24\xD9\xB9\x4D\x4C\xB2\xA0\x55\x00' \
            b'\xDC\x45\x6A\x03\xD3\x1A\xA3\x36\x91\x34\xE9\x35\x2B\xB5\x95\x7D' \
            b'\x74\xD5\x84\xA7\x10\x09\x89\x63\x60\xD4\x70\x73\x33\x0F\x33\x64' \
            b'\xE9\xCA\xA2\xCE\xB1\x5A\xAD\x9A\x51\x9B\xC7\x01\x60\x13\x12\xD0' \
            b'\x45\x95\xAF\x1F\xA5\x07\x69\xEA\x76\x6E\x9A\x54\x0D\x01\x38\xAD' \
            b'\x66\x23\xFD\x1F\x0C\x01\xD9\x0B\xCF\x23\x45\xBF\x90\xD9\x94\xB6' \
            b'\x0F\x54\xE6\xFD\x32\x14\xAC\x18\x9C\x2C\x6A\x8B\x57\xB4\x42\xA0' \
            b'\x86\x4D\xB3\xC6\x32\x57\x06\xA1\x99\xE5\x6C\xEE\x37\xDD\xDB\xC3' \
            b'\x98\xB4\x29\x7B\xEB\xCE\x9D\x8F\xB4\x3D\xB1\x2B\x2C\xB6\x11\xEA' \
            b'\xAF\xB4\x56\x49\x48\x5A\x59\x6F\xB2\xF3\x56\xA3\x8B\x93\xE2\x18' \
            b'\x36\x88\x87\x33\x5D\x6E\x27\xF4\xB9\x13\xF2\x6C\x87\x98\xFC\x3A' \
            b'\x7D\x35\xA9\xC2\x3E\x46\xE8\x5E\x7B\x34\xA4\x20\x5D\xDE\x6D\x47' \
            b'\x60\x26\x65\xBC\xAD\x7F\xC4\xE3\x32\xC0\x69\xB9\x1B\x30\x8E\x17' \
            b'\x96\xD5\x36\xC6\xAC\xA8\x5F\x24\x5C\xED\xEC\xE6\x0B\x82\x21\xB9' \
            b'\xD8\x5B\x5F\x94\x78\xD9\x20\xB6\x54\xF8\x39\x6B\xAE\x45\xE1\xC7' \
            b'\x2B\x9E\xCA\x61\x8D\xF2\x83\xD5\x40\xDF\xA7\xAD\x5E\xEB\x74\xB4' \
            b'\x30\x7A\x92\xAD\x2D\x7E\xCC\xBF\x1F\xEB\xDB\xFF\xC4\x00\x1F\x11' \
            b'\x00\x02\x02\x01\x05\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00' \
            b'\x00\x01\x10\x11\x02\x03\x12\x20\x21\x31\x41\x61\xFF\xDA\x00\x08' \
            b'\x01\x03\x01\x01\x3F\x01\x1A\xE7\xB7\x93\xE7\x67\xA5\x70\xA2\xA5' \
            b'\x46\xD3\x68\x91\x94\x63\xE7\x25\x34\x64\x8F\x82\x9B\x10\xFA\x17' \
            b'\x16\x6A\x74\x60\xA1\xBA\x2C\xD2\xF4\xCC\x5D\x4A\xCA\x75\x3D\x31' \
            b'\x50\xE3\x4F\x2E\xC7\xEC\x55\x15\x08\x79\x0F\xB7\x2B\x26\x6E\x66' \
            b'\x96\x55\x97\x65\xCD\x14\x2E\xD8\xC5\x34\x2C\x7E\xB3\xE9\x8B\x10' \
            b'\xA2\x90\x8D\x47\xDC\xDC\x2F\x0F\xA2\x62\x62\x37\x1D\xB2\xE8\xF5' \
            b'\xF0\xA1\x1F\x44\x26\x62\xE3\x77\xE1\xA9\x95\x98\xC2\x8A\x12\x36' \
            b'\xF6\x50\x91\x54\x2C\xC7\x94\x21\xA1\x73\x70\xC5\x1F\x45\x1F\xFF' \
            b'\xC4\x00\x21\x11\x00\x02\x02\x01\x05\x01\x01\x01\x01\x00\x00\x00' \
            b'\x00\x00\x00\x00\x00\x01\x10\x11\x02\x03\x20\x21\x31\x41\x12\x13' \
            b'\x22\x32\xFF\xDA\x00\x08\x01\x02\x01\x01\x3F\x01\x2F\x7F\xD6\xEE' \
            b'\xE3\x9B\x8B\xD9\x74\x5E\xCF\xAA\x62\xCD\x31\x32\xE6\xCB\x32\x66' \
            b'\x27\x86\x6F\x91\xB1\xC6\x3D\x43\x65\x96\x5C\x2E\xF8\x32\x74\xA3' \
            b'\x22\x86\x84\x87\xBB\x4D\x72\x6A\xE5\x15\x63\xE2\x11\xD9\x50\xD4' \
            b'\xE9\x99\xE5\x6E\x2C\x7C\x8B\x1F\x47\x17\x65\xC3\x3E\x4F\xF2\x9C' \
            b'\xBD\x33\xF1\x46\xA6\x1F\xCD\x21\xAD\xAF\xA9\x75\x71\x66\x59\xF3' \
            b'\x47\x86\x6B\x91\xEC\x66\x9A\xF6\x1F\x27\xE6\x86\x3E\xCF\x0C\x95' \
            b'\x8D\x45\x43\x3A\x5B\x2C\xC8\xF0\x63\x1A\x86\x60\xBD\x32\xD8\xD9' \
            b'\x96\x47\xDF\x03\xC8\x6C\xBB\x3E\x47\x8D\x9D\x21\xC3\xDC\xE1\x46' \
            b'\x43\x3C\x9F\xFF\xC4\x00\x2B\x10\x00\x01\x03\x02\x05\x03\x02\x07' \
            b'\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x11\x21\x02\x10\x12\x20' \
            b'\x31\x41\x61\x03\x51\x71\x30\x81\x13\x22\x32\x42\x53\x72\x91\xA1' \
            b'\xFF\xDA\x00\x08\x01\x01\x00\x06\x3F\x02\xC9\x16\x66\xB3\xD3\x3E' \
            b'\x84\x15\x84\x7F\x54\x0B\xE8\x0A\xED\x58\x58\x4D\xB1\x02\x07\x9B' \
            b'\xE8\xF9\x21\x69\x6E\x4A\xE5\x91\x3E\xC8\x03\xAE\xF9\x1B\x34\x84' \
            b'\xE3\x70\xA9\x7D\x35\xF5\x28\x7E\xC8\x92\x84\xBE\x40\xCB\x09\xFE' \
            b'\xA8\xB4\xD8\x2A\x3F\x55\x24\xF8\x36\x6B\x13\xB2\x09\x8A\x9F\xA5' \
            b'\x09\xB9\xC3\xB2\xE9\x83\x2D\x7D\x13\x4F\x2B\xE4\xDB\x34\x6D\xBA' \
            b'\xEB\x7E\x3D\xD3\x80\xD5\x6C\x81\x3F\xE5\x99\x60\xA6\x2C\x46\x43' \
            b'\x88\x58\x74\xC7\x92\xB9\x4E\x0B\x1E\x17\xDA\x7C\xD3\x60\x55\x5E' \
            b'\x56\x31\xA8\xCA\xFD\x44\x6A\xF7\xCB\xCA\x7E\xF6\x34\xDD\x85\x2B' \
            b'\xE1\xD3\xDA\x53\xE8\x56\xE8\x02\x5F\x23\x33\xA8\x01\x63\x29\xC4' \
            b'\xDA\x24\xA3\x86\x4D\x4A\x50\x1D\xF3\x88\x75\x84\xE8\x89\x3D\x2A' \
            b'\x5D\x97\x54\xD1\x48\x07\x09\x53\x63\xC5\xFF\x00\xFF\xC4\x00\x22' \
            b'\x10\x01\x00\x03\x01\x00\x02\x02\x02\x03\x01\x00\x00\x00\x00\x00' \
            b'\x00\x01\x00\x11\x21\x31\x41\x51\x10\x61\x71\xA1\x91\xB1\xF0\xD1' \
            b'\xFF\xDA\x00\x08\x01\x01\x00\x01\x3F\x21\x8A\xDC\xE4\xBF\x8A\x80' \
            b'\x95\xB5\x4B\x53\xC8\x8A\x05\x6B\x3F\x58\xFC\xCA\x46\x98\x42\x1C' \
            b'\x8C\x63\x64\xBB\xEC\xA3\xC1\xF3\x72\xC5\x3A\xF7\x06\x11\xD5\xF3' \
            b'\x2E\xB8\x54\xA1\x80\x5B\x43\x0C\xE4\xC4\xB5\xBA\xC5\x70\xA4\x6A' \
            b'\x79\x95\x71\x5D\x6A\x24\xAD\x0F\x98\xB7\x83\xD9\x37\x1D\x58\x74' \
            b'\x96\xC2\x05\x43\x76\xB7\xF7\x02\xC7\xA9\x1B\x80\xB2\xEB\x67\xEE' \
            b'\x96\x2F\xB6\x03\xFD\xFE\xD9\x53\x48\xFD\xA6\x9A\xF8\x48\xB1\x1F' \
            b'\x02\xE4\x9B\x84\x8D\xB1\xBA\x4D\x7B\x86\x4C\x34\x94\xDE\x4C\x60' \
            b'\x83\x65\xF3\x31\x58\xED\xE9\x5E\xA5\xD6\x84\x08\x90\x8F\x61\x19' \
            b'\x9D\x3F\xD2\x2A\xEA\x6A\xAA\xB9\x36\xCA\x85\x5B\x11\x2F\xC4\x28' \
            b'\x4D\x2D\xA9\x4A\xD5\x39\x31\xF1\x79\x0D\x5E\xD1\x36\xEE\xE7\x11' \
            b'\xA8\x43\x20\x7E\x54\xD4\x38\xE3\xF9\x82\xBA\x76\xCE\x45\x0C\x84' \
            b'\x14\x4F\x13\x82\x2F\x57\x30\x15\x54\xCF\x72\x27\x91\x5F\x6F\x24' \
            b'\x15\xAD\x5F\xDC\xB9\xAE\x47\xA0\x47\xA9\xA5\x4B\x53\xC2\x37\x58' \
            b'\x41\x8D\x00\x58\xF7\x3B\x30\x35\x78\x84\x06\x3B\x0F\x73\x1B\x49' \
            b'\x90\x6E\x6C\x95\xE1\xC9\xB6\x82\x02\xA5\x5A\x10\x66\xE9\xA2\xA9' \
            b'\x7F\xD7\x2B\xB5\x1E\x06\x12\x96\x16\xB5\xD1\xFA\x83\x66\x41\x74' \
            b'\x45\xC7\x4F\x2F\xB8\xB1\x7E\xC9\x79\xDE\xF8\xFC\x5E\x22\xE6\x0A' \
            b'\xA9\x6D\xF7\x67\xFC\xE0\x51\xBE\xA0\xD7\xFB\xB1\x00\x35\x4F\x64' \
            b'\xB3\x0F\xB8\x7E\xD3\x22\x81\x5F\xCE\x3F\x10\xBE\xD9\xC4\xDE\x82' \
            b'\x2E\x29\x1B\xE1\xE6\xFE\xA5\xD0\xE2\xFF\x00\x0F\x11\xD6\x72\xF5' \
            b'\xF5\x55\xE2\x5A\x76\x66\x23\x22\x1D\x9F\xC9\x0C\x22\x64\xF0\x88' \
            b'\x73\xF1\x29\xC1\x74\x4B\x0A\x99\x51\xD0\xD6\x67\x07\x07\x7B\x29' \
            b'\x4E\x71\xD9\xE3\x8B\x9B\xC8\x50\x6C\x59\x69\x44\xB5\x92\xF1\x52' \
            b'\xF0\x29\xE3\x44\xC6\x77\x74\xF5\x2E\x29\x27\x0D\x61\xC8\xA8\x17' \
            b'\xAE\xA0\x7D\x92\xD0\xB0\x6D\xB1\xEC\x47\x3D\x4F\x68\x60\x96\xFD' \
            b'\xC3\x5E\x02\xD2\x3C\x61\x01\xE9\x9E\xD4\x00\x2A\x76\xB0\x83\xF1' \
            b'\x09\x8B\x9F\x19\xBF\x4A\x88\x65\xFC\x7F\xFF\xDA\x00\x0C\x03\x01' \
            b'\x00\x02\x00\x03\x00\x00\x00\x10\x67\xF4\xF2\x21\x76\x9C\xF4\x1F' \
            b'\xCE\x26\xFF\x00\x7E\xF0\x1F\x1A\x3A\xDF\xE5\x0B\x05\x92\xD0\x3B' \
            b'\x00\x0F\xA7\xBA\xE2\xEC\x7E\x77\x6E\x65\x57\x5D\x06\x7E\xBE\x86' \
            b'\x26\xD9\x99\x9B\xB2\xD5\x64\x02\xBE\x04\xD9\x4F\xE3\x37\xFB\x49' \
            b'\x01\x6F\xD3\x9B\xD0\x9C\x5C\x73\x5F\xFF\xC4\x00\x1C\x11\x01\x01' \
            b'\x01\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00' \
            b'\x11\x21\x10\x31\x41\x51\x20\xFF\xDA\x00\x08\x01\x03\x01\x01\x3F' \
            b'\x10\x7F\xC0\x16\x16\x16\x0C\xFF\x00\x1E\xFC\xB2\x6E\x3C\xC3\x37' \
            b'\xC0\x5B\x1F\x04\x59\x74\x39\xE0\x3E\x3A\x25\x96\x72\x08\x61\x26' \
            b'\xDD\x4A\x2C\x21\x9D\x8E\xB9\x00\xFF\x00\x07\xEC\x10\x82\x0B\x17' \
            b'\x1E\x5D\x7B\x8E\xB0\xF3\xC4\x12\xDE\x45\x5D\x8F\xEF\x84\x7A\x58' \
            b'\xC2\x08\xE5\xF3\x46\x9B\xF5\x88\xCB\xE5\xF9\x2F\xF2\x14\x87\xE3' \
            b'\x0C\xDF\x2B\x03\xC1\xAE\xC7\xDB\x0C\x92\xD9\x83\xC6\x53\xE7\xCB' \
            b'\x6B\xA5\x84\xCC\xE5\xAF\x0B\x65\xEA\x99\x22\xEB\x7E\xA3\x4E\xC3' \
            b'\x06\xD8\x3C\x17\x02\xDF\x76\x1C\x81\xCF\x46\x10\x99\x36\x3C\xA8' \
            b'\x9D\x3B\x67\xF2\xF8\x08\x30\x8F\xED\xA8\xE4\xBA\x24\x99\x44\x92' \
            b'\x95\xF9\x65\x7F\x58\x7B\x4C\x1D\xD8\x3C\x6C\x67\xC9\x0B\x4F\x03' \
            b'\xB9\x34\x61\x1F\xDF\x02\x11\xCF\x18\x4E\xF5\x04\x81\x71\xB4\xF9' \
            b'\x7F\x68\x82\x5D\x76\x18\x65\xF0\xC8\xBF\xB3\x20\x47\x8F\xD8\x64' \
            b'\xE4\x78\x3D\x88\xFB\xF5\xFF\xC4\x00\x1D\x11\x01\x01\x01\x00\x03' \
            b'\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x11\x10\x21' \
            b'\x31\x41\x51\x61\x91\xFF\xDA\x00\x08\x01\x02\x01\x01\x3F\x10\x18' \
            b'\xD7\x1E\x70\x93\xB2\xA4\x7C\x33\x9C\xEF\x01\xAC\xBC\xF2\x15\x8C' \
            b'\xB4\x3A\xBA\x5B\x2C\x9B\x6B\xDD\x8C\xDB\x65\xE1\xEC\x10\x16\x8F' \
            b'\x56\x2D\xD6\x7A\xB1\xC3\xE1\x2D\x23\x34\xC9\x70\x36\x5B\x2C\xF0' \
            b'\x84\xBC\x1B\x9E\x05\x56\x41\x9F\x1C\x42\xF7\x78\xCB\x6C\xBE\x17' \
            b'\x50\x13\xF9\xCB\xC3\x6B\xAB\xC2\x5B\x6B\x63\x8B\x75\x92\x48\x77' \
            b'\x3D\x8F\xD4\x85\xF8\xCF\x5C\x3D\x12\x2E\x8E\x02\x18\xCF\x12\xE6' \
            b'\xFC\xBA\x16\xA7\x70\x07\xF6\xF1\xCC\x19\xDC\x22\x8E\x41\xF9\x1B' \
            b'\xEB\x13\xF8\x2C\x0C\x9B\x73\x8D\x81\x37\x70\x3D\x91\x5C\x7C\x98' \
            b'\x47\x24\xE8\xB7\x66\x53\xDC\xC5\xAD\xBB\x53\x56\xEB\x13\xA2\x6D' \
            b'\xF9\xEF\xFB\x0D\x8F\x46\x1E\x13\x26\x48\xBD\x13\x57\x0B\x3A\xA3' \
            b'\xC8\xEE\x5C\x91\x65\x23\xCF\x03\xB6\x50\xE5\xD0\xD5\xB6\xED\x6B' \
            b'\xCB\x27\x37\x49\xDB\x0B\x48\xCE\x5F\x65\x65\xF4\xB1\xD1\x98\x9D' \
            b'\x20\xC8\x96\xB0\xC8\x82\xD7\x26\x26\x12\x49\xF2\x3D\x97\x57\xA9' \
            b'\xF3\x36\x5F\xFF\xC4\x00\x24\x10\x01\x00\x02\x02\x02\x01\x04\x03' \
            b'\x01\x01\x00\x00\x00\x00\x00\x00\x01\x00\x11\x21\x31\x41\x51\x61' \
            b'\x71\x81\x91\xA1\x10\xB1\xC1\xD1\xE1\xFF\xDA\x00\x08\x01\x01\x00' \
            b'\x01\x3F\x10\x02\x36\x62\x33\x23\xFC\x4C\x39\x8B\x6D\xB9\x97\xC4' \
            b'\x86\xDA\xD4\x6B\xA9\xD9\x75\x0D\x20\x5D\x66\x5B\xAB\xA0\xA0\xF5' \
            b'\x84\x56\xD7\x29\x34\xFD\x3E\xD3\x04\x23\xD4\xF4\x7E\x05\x70\x20' \
            b'\x8D\x76\x6A\xDE\x23\x62\x81\xFA\x95\x0D\x46\x83\x5E\xF2\xA1\xF8' \
            b'\xDD\x98\x31\x42\x97\xBF\xB9\x85\xAD\x7C\xB1\xBD\x43\xDE\x1C\xA7' \
            b'\x2C\x72\xF8\x4A\x46\x82\x02\x9F\x0B\x2F\xE6\x09\xBE\xA0\x52\x0E' \
            b'\xE6\x56\x86\x94\x2E\xB2\x78\xCF\xD7\xE3\x5B\xB8\x72\xB3\x88\x86' \
            b'\xDA\x98\x86\x94\x34\x9E\x25\x77\xC9\x4B\xA3\xD7\xB6\x52\x56\xB8' \
            b'\x23\x88\x88\x2A\xBF\x86\x66\x95\x88\xCB\x10\x56\x37\xF1\x08\x1B' \
            b'\xE6\xE4\xAE\x90\xDC\x61\xCC\x97\x2A\xFB\x00\x7B\x20\x5C\xB2\xE1' \
            b'\x75\xC8\x98\xC3\x99\x47\xE1\x5C\x21\xC0\xCA\x45\xE6\x0A\x47\x11' \
            b'\x42\xBF\x93\x1A\xAC\xAE\xC9\x44\x0B\x8E\x12\xA9\xB2\x68\xC0\xB7' \
            b'\x7F\xAF\xB8\x2B\x36\x9E\x39\xBF\xD4\xA0\x13\x8B\x1D\x59\xC3\x2C' \
            b'\x6F\x58\x8A\x2E\xB1\x01\xE1\xE5\x8C\x78\xB3\x15\x8F\x84\xA3\xE3' \
            b'\xDC\x15\x44\xC3\x77\x2D\x81\x37\x1F\xDF\x9D\xC7\xA1\x46\x36\xD3' \
            b'\x44\xFF\x00\x63\x90\x5A\x2E\x29\xD8\xEA\xB8\xDC\x69\x20\x16\x6D' \
            b'\xA3\x53\x1B\x6D\x17\x09\x0D\x1A\x1A\xCB\xD1\xCC\x26\x5A\x6A\xB2' \
            b'\x7B\xC6\x7F\x58\x97\xA7\xCF\xEE\x11\x14\x07\x72\xC4\x1E\x01\x09' \
            b'\xB4\x52\xCC\x84\x84\xC8\x56\x4C\xAD\x6F\x30\x79\xB5\xFF\x00\x21' \
            b'\x7F\x52\x88\xF9\xAA\xEE\x51\x16\x25\x20\x68\x88\x38\x44\x2D\x51' \
            b'\xBB\xBC\xB8\xF4\xA8\x54\xEC\x45\x7B\xCC\x66\x02\x76\x8C\x28\x26' \
            b'\x11\x6F\xAB\xD9\xF7\x0E\x78\x76\xDE\x87\x88\x9B\xAB\xE0\x5B\xAF' \
            b'\x46\x27\x7E\xD6\x83\xCC\xB3\xD3\x5C\xDA\x9B\xA9\x6E\x5B\xC7\x1D' \
            b'\x5D\xAF\xF3\xD6\x3A\x98\x37\x29\x08\x0A\xB6\x2B\xDE\x11\xB8\xF4' \
            b'\x31\xE8\x21\xFC\x1C\x37\xC8\xFB\x8E\x69\x10\x8E\xC8\x46\xCC\xC6' \
            b'\xA9\x59\xAA\x88\x41\x70\x39\x3F\xB3\x07\x71\xDC\x02\x6A\xAA\x39' \
            b'\x46\xEA\x52\x01\x6E\x14\xA9\x45\xBC\x78\x6E\xA3\x07\x06\x45\x8B' \
            b'\xF5\x91\xED\xEA\x60\x51\xAF\x17\x7A\xC1\x58\x84\xEC\x80\x34\x09' \
            b'\x4D\x4F\x71\x6E\x2F\x1A\xE9\x4F\x96\x1C\x93\x62\x44\xA7\x97\x33' \
            b'\x0E\x22\x0B\xAC\xAC\x1D\x64\xF1\x67\x10\x68\xC1\xE3\x52\x86\x28' \
            b'\x8F\x0B\x8A\xFC\x17\xEE\x4B\x76\x91\x6F\x53\x05\x27\x32\xAB\xDA' \
            b'\x14\x3B\x91\x1E\xAC\x06\x34\xA4\xB4\xCA\xD8\xF9\x94\x07\x17\xFD' \
            b'\x12\xA4\x70\xE1\xB8\x10\x89\xD8\x8D\xDA\xA6\x20\xEE\x16\x29\xAF' \
            b'\xC4\x3C\x5A\x58\xB2\x50\x15\x6B\x9D\x44\x27\x4B\xA7\x43\x4F\x8A' \
            b'\x83\xD8\xC7\xBC\x4A\x20\x57\x15\x83\xD8\x7D\x4E\xA0\x5C\xD3\x38' \
            b'\xA9\x92\xC8\xCC\x4A\x64\xF5\x97\x76\xF2\x7E\xBF\x90\xD8\x28\xA4' \
            b'\x60\x05\x4C\xCF\xD2\x06\xFB\x1D\xC5\xD9\x42\x15\x29\x78\x49\x5E' \
            b'\x5A\x80\x66\x9D\xD1\xF5\x09\x22\x32\x09\x73\xB1\xA7\x5D\x7B\x47' \
            b'\x0D\xB1\x54\xE6\x30\xCA\xBC\x32\x2D\x9A\x3D\xE5\x30\xA2\x0A\xFC' \
            b'\xC0\xBC\xCB\x8F\x42\x50\xDD\x70\xC0\xF7\x62\xFB\x7A\x80\xDB\x30' \
            b'\x41\xA6\xC0\xAD\x07\x60\xCC\x1C\x41\x81\x7D\xE0\x83\x35\x45\xDB' \
            b'\xE2\x24\x47\x45\x72\xAD\xCA\x50\x14\xDA\x77\x2F\x27\x25\xAF\x04' \
            b'\x10\xC0\xAD\x57\x11\x8A\xD5\x68\xB9\x70\x9B\x15\x10\x0F\x93\x70' \
            b'\x10\x3A\xB7\xF5\xFF\x00\x23\x10\xC9\x87\xCC\xAA\x19\x8F\x60\xB5' \
            b'\x92\x21\xC4\xE2\x1D\xD5\xCA\xF7\x18\xFF\x00\x02\x6A\x6E\x33\x3C' \
            b'\x37\xEF\x2D\x00\xE0\xE3\x17\x90\x80\x0D\x15\x9E\x3E\x66\x51\xE0' \
            b'\x0E\x8C\x31\x59\x1C\x7F\x9F\xF6\x69\x41\x71\xE6\x7F\xFF\xD9' \

class IP:

    # static dictionary
    received_packets = {}

    def __init__(self, packet):
        version_and_len, self.service_type, self.total_lenght, self.id, \
        flags_and_fragemnted, self.time_to_live, self.protocol, \
        self.header_checksum, self.src_ip, self.dest_ip \
            = struct.unpack('!BBHHHBBHII', packet[:20])

        self.version = (version_and_len & (0b11110000)) >> 4
        self.header_length = (version_and_len & 0b00001111) * 4  # header size em bytes
        self.options = packet[20:self.header_length]

        self.flags = (flags_and_fragemnted & 0b1110000000000000) >> 13
        self.fragmented_offset = int(flags_and_fragemnted & 0b1111111111111)
        self.this_payload = bytes(packet[self.header_length:])
        self.more_packets = self.flags & 0b001
        self.received_all = False

        if not self.id in IP.received_packets:
            IP.received_packets[self.id] = {'payload': b'', 'received_size': 0, 'received_frags': []}

        if self.fragmented_offset not in IP.received_packets[self.id]['received_frags']:
            old_payload = IP.received_packets[self.id]['payload']
            if len(old_payload) < self.fragmented_offset:
                old_payload = old_payload + b'\0' * self.fragmented_offset-len(old_payload)

            IP.received_packets[self.id]['payload'] = old_payload[:self.fragmented_offset] + self.this_payload + \
                                                      old_payload[self.fragmented_offset+len(self.this_payload):]
            IP.received_packets[self.id]['received_size'] += len(self.this_payload)
            IP.received_packets[self.id]['received_frags'].append(self.fragmented_offset)
        else:
            print("Erro fragmento ja recebido", self.fragmented_offset)

        if not self.more_packets:
            self.received_all = True
            self.payload = IP.received_packets[self.id]['payload']
            IP.received_packets[self.id]['received_all'] = True

    @staticmethod
    def addr2str(ip):
        return ".".join(map(lambda n: str(ip >> n & 0xFF), [24, 16, 8, 0]))


def send_ping(send_fd):
    print('enviando ping')
    # Exemplo de pacote ping (ICMP echo request) com payload grande
    msg = bytearray(b"\x08\x00\x00\x00" + payload)
    msg[2:4] = struct.pack('!H', calc_checksum(msg))
    send_fd.sendto(msg, (dest_ip, 0))

    asyncio.get_event_loop().call_later(1, send_ping, send_fd)

def mac_addr_to_bytes(addr):
    return bytes(int('0x'+s, 16) for s in addr.split(':'))

def mac_addr_to_str(mac):
    return ':'.join('%02x' % b for b in mac)

def send_eth(fd, datagram, protocol):
    eth_header = mac_addr_to_bytes(dest_mac) + \
        mac_addr_to_bytes(src_mac) + \
        struct.pack('!H', protocol)
    fd.send(eth_header + datagram)


def ip_addr_to_bytes(addr):
    return bytes(map(int, addr.split('.')))

ip_pkt_id = 0
def send_ip(fd, msg, protocol):
    global ip_pkt_id
    ip_header = bytearray(struct.pack('!BBHHHBBH',
                            0x45, 0,
                            20 + len(msg),
                            ip_pkt_id,
                            0,
                            15,
                            protocol,
                            0) +
                          ip_addr_to_bytes(src_ip) +
                          ip_addr_to_bytes(dest_ip))
    ip_header[10:12] = struct.pack('!H', calc_checksum(ip_header))
    ip_pkt_id += 1
    send_eth(fd, ip_header + msg, ETH_P_IP)


def raw_recv(fd):
    frame = fd.recv(12000)
    packet_dest_mac, packet_src_mac, protocol = struct.unpack("!6s 6s H", frame[:14])
    if mac_addr_to_str(packet_dest_mac) == my_mac:
        print("Frame recebido com mac ", my_mac)
        # print(mac_addr_to_str(packet_dest_mac))
        if protocol == ETH_P_IP:
            print("Pacote do tipo IP")
            ip_recv(frame[14:])



def ip_recv(packet):
    ip_packet = IP(packet)
    print("\nID do pacote:", ip_packet.id)
    print("Source IP:", IP.addr2str(ip_packet.src_ip))
    print("Dest IP:", IP.addr2str(ip_packet.dest_ip))
    print("Tamanho do pacote", ip_packet.total_lenght)
    print("Offset Frag", ip_packet.fragmented_offset)
    print("Tamanho do Header", ip_packet.header_length)
    print("Flag More Packets", ip_packet.more_packets, "\n")

    if ip_packet.received_all:
        print("Payload:")
        print("Tamanho:", len(ip_packet.payload), "bytes")
        print("Bytes:")
        string = ""
        for byte in ip_packet.payload:
            string += str(format(byte, "#04x")) + " "
        print(string)

def calc_checksum(segment):
    if len(segment) % 2 == 1:
        # se for ímpar, faz padding à direita
        segment += b'\x00'
    checksum = 0
    for i in range(0, len(segment), 2):
        x, = struct.unpack('!H', segment[i:i + 2])
        checksum += x
        while checksum > 0xffff:
            checksum = (checksum & 0xffff) + 1
    checksum = ~checksum
    return checksum & 0xffff


if __name__ == '__main__':
    # Ver http://man7.org/linux/man-pages/man7/raw.7.html
    fd = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.htons(ETH_P_ALL))
    fd.bind((if_name, 0))

    loop = asyncio.get_event_loop()
    loop.add_reader(fd, raw_recv, fd)
    # asyncio.get_event_loop().call_later(1, send_ping, fd)
    loop.run_forever()
